# This workflow runs on `pull_request`.
#
# `Terraform` job uses `checkout` to download the content of the repository. It installs the latest version of Terraform CLI
# and configures the Terraform CLI configuration file with an API token for Terraform Cloud (app.terraform.io). It runs `terraform init`
# to initialize the director. It uses the GitHub Action `GitHubAction_terraform-fmt` to run `terraform fmt`, `GitHubAction_terraform-validate`
# to run `terraform validate` and `GitHubAction_terraform-plan` to run `terraform plan`.
#
# Documentation
# - https://github.com/actions/checkout
# - https://github.com/benyboy84/GitHubAction_terraform-fmt
# - https://github.com/benyboy84/GitHubAction_terraform-validate
# - https://github.com/benyboy84/GitHubAction_terraform-plan
#
# Prerequisites:
# - An Azure account and Azure Access Credentials
# - A Terraform Cloud account
#
# Environment variables:
# - ARM_CLIENT_ID
# - ARM_CLIENT_SECRET
# - ARM_TENANT_ID
#
# Terraform Cloud user API token stored as a GitHub secret (e.g. TF_API_TOKEN) in the repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# GitHub secret in step `Setup Terraform`.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: Terraform

on:  # yamllint disable-line rule:truthy
  pull_request:
    branches:
      - '*'                      # matches every branch that doesn't contain a '/'
      - '*/*'                    # matches every branch containing a single '/'
      - '**'                     # matches every branch

permissions:
  contents: write
  pull-requests: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_CLOUD_ORGANIZATION: "ConseilsTI" ## Name of your existing Terraform Cloud Organization. RECOMMENDED: use repository variables. ex. "${{ vars.TF_CLOUD_ORGANIZATION }}"
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }} ## Terraform Cloud API Token. RECOMMENDED: replace with github action secrets. ex. "${{ secrets.TF_API_TOKEN }}"
      TF_WORKSPACE: "terraform_tfe" ## Name of your existing workspace in Terraform Cloud.
      CONFIG_DIRECTORY: "./" ## Directory of your Terraform Configuration. Relative to the project root.
      ## Additional env variables
      # TF_LOG: DEBUG ## Helpful for troubleshooting
      # TF_MAX_TIMEOUT: "30m" ## If you wish to override the default "1h"
    steps:

      - name: Branch
        id: branch
        run: echo "branch=${GITHUB_HEAD_REF}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.branch.outputs.branch }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        id: fmt
        uses: benyboy84/GitHubAction_terraform-fmt@v1
        with:
          check: false
          recursive: true
          comment: true

      - name: Git Push
        if: ${{ steps.fmt.outputs.exitcode == 3 }}
        run: |
          git config user.name "GitHub Action"
          git config user.email "notifications@github.com"
          git add -A
          git commit -m "Automated Terraform Formatting"
          git push -u origin ${{ steps.branch.outputs.branch }}
          echo "Terraform file(s) has been formatted and pushed to the repository."

      - name: Terraform Validate
        uses: benyboy84/GitHubAction_terraform-validate@v1

      # - name: Terraform Plan
      #   id: plan
      #   uses: benyboy84/GitHubAction_terraform-plan@v1.0.0
      #   with:
      #     GitHub_Token: ${{ secrets.GITHUB_TOKEN }}
      #     Out: terraform.tfplan
  
      - uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.4
        id: upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.4
        id: run
        ## run may fail, if so continue to output PR comment
        ## step.terraform-cloud-check-run-status will fail job after pr comment is created/updated.
        continue-on-error: true
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}
          plan_only: true
          ## OPTIONAL: set your own message for run. A default message will be defined for you.
          ## Example:
          # message: "Triggered From GitHub Actions CI ${{ github.sha }}"

      - uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.4
        id: plan-output
        with:
          plan: ${{ steps.run.outputs.plan_id }}

      ## REQUIRED: Workflow permissions: `Read and write permissions`
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            })
            const output = `#### Terraform Cloud Plan Output
               \`\`\`\n
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.run.outputs.run_link }})
               `
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

        ## Check Run Status, if not planned_and_finished fail the job
      - id: terraform-cloud-check-run-status
        if: ${{ steps.run.outputs.run_status != 'planned_and_finished'}}
        run: |
          echo "Terraform Cloud Run Failed or Requires Further Attention"
          echo "Run Status: '${{ steps.run.outputs.run_status }}'"
          echo "${{ steps.run.outputs.run_link }}"
          exit 1